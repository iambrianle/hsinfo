src/App.js
''''
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import Register from './components/Register';

import Login from './components/Login';
import Profile from './components/Profile';
import Search from './components/Search';
import ChangePassword from './components/ChangePassword';

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" />} />
        <Route path="/register" element={<Register />} />
        <Route path="/login" element={<Login />} />
        <Route path="/profile" element={<Profile />} />
        <Route path="/search" element={<Search />} />
        <Route path="/change-password" element={<ChangePassword />} />
      </Routes>
    </Router>
  );
};

export default App;
'''

src/firebase.js
''''

import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getStorage } from 'firebase/storage';
import { getFirestore } from "firebase/firestore";


const firebaseConfig = {
  apiKey: "AIzaSyAIhN2rKdzRum24bxN1oFfOrS0r7POzFrU",
  authDomain: "hsinfohs.firebaseapp.com",
  projectId: "hsinfohs",
  storageBucket: "hsinfohs.appspot.com",
  messagingSenderId: "94732520226",
  appId: "1:94732520226:web:6ffda594e09049de12337b"
};


const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
const storage = getStorage(app);

export { auth, db, storage };
''''

src/components/ChangePassword.js
''''
import React, { useState } from 'react';
import { getAuth } from "firebase/auth";


const ChangePassword = () => {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [message, setMessage] = useState('');
  const auth = getAuth();

  const handleChangePassword = async (e) => {
    e.preventDefault();
    setMessage('');

    try {
      const user = auth.currentUser;
      const cred = auth.EmailAuthProvider.credential(user.email, currentPassword);
      await user.reauthenticateWithCredential(cred);
      await user.updatePassword(newPassword);
      setMessage('Password changed successfully');
      setCurrentPassword('');
      setNewPassword('');
    } catch (error) {
      setMessage(error.message);
    }
  };

  return (
    <div>
      <h1>Change Password</h1>
      {message && <p>{message}</p>}
      <form onSubmit={handleChangePassword}>
        <input
          type="password"
          placeholder="Current Password"
          value={currentPassword}
          onChange={(e) => setCurrentPassword(e.target.value)}
        />
        <input
          type="password"
          placeholder="New Password"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
        />
        <button type="submit">Change Password</button>
      </form>
    </div>
  );
};

export default ChangePassword;
''''
src/components/Login.js
''''
import React, { useState } from 'react';
import { auth } from "../firebase";
import { signInWithEmailAndPassword } from "firebase/auth";

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password)
      setEmail('');
      setPassword('');
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p>{error}</p>}
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;
''''
src/components/Profile
''''
import React, { useState, useEffect } from 'react';
import { onAuthStateChanged } from "firebase/auth";
import { collection } from "firebase/firestore";
import { ref } from "firebase/storage";


const Profile = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [info, setInfo] = useState({
    name: '',
    username: '',
    file: null,
  });


  useEffect(() => {
    const unsubscribe = onAuthStateChanged((user) => {
      if (user) {
        setUser(user);
        fetchProfileInfo(user.uid);
      } else {
        setUser(null);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const fetchProfileInfo = async (uid) => {
    const docRef = collection('users').doc(uid);
    const doc = await docRef.get();
    if (doc.exists) {
      setInfo(doc.data());
    } else {
      setInfo({
        name: '',
        username: '',
        file: null,
      });
    }
  };

  const handleChange = (e) => {
    setInfo({
      ...info,
      [e.target.name]: e.target.value,
    });
  };

  const handleFileChange = (e) => {
    setInfo({
      ...info,
      file: e.target.files[0],
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const docRef = collection('users').doc(user.uid);
    await docRef.set(info);

    if (info.file) {
      const storageRef = ref('files/' + user.uid);
      const uploadTask = storageRef.put(info.file);
      uploadTask.on(
        'state_changed',
        null,
        (error) => console.error(error),
        () => {
          storageRef.getDownloadURL().then(async (url) => {
            await docRef.update({ file: url });
          });
        }
      );
    }
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  if (!user) {
    return <p>Please log in to view your profile.</p>;
  }

  return (
    <div>
      <h1>Profile</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="name"
          placeholder="Name"
          value={info.name}
          onChange={handleChange}
        />
        <input
          type="text"
          name="username"
          placeholder="Username"
          value={info.username}
          onChange={handleChange}
        />
        <input type="file" onChange={handleFileChange} />
        <button type="submit">Save</button>
      </form>
    </div>
  );
};

export default Profile;
''''
src/components/Register.js
''''
import React, { useState } from 'react';
import { auth } from "../firebase";
import { createUserWithEmailAndPassword } from "firebase/auth";


const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  

  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      await createUserWithEmailAndPassword(auth, email, password)
      setEmail('');
      setPassword('');
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div>
      <h1>Register</h1>
      {error && <p>{error}</p>}
      <form onSubmit={handleRegister}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Register</button>
      </form>
    </div>
  );
};

export default Register;
''''
src/components/Search.js
''''
import React, { useState } from 'react';
import { collection } from "firebase/firestore";


const Search = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const handleChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const query = searchTerm.trim().toLowerCase();
    const usersRef = collection('users');

    const nameResults = await usersRef
      .where('name', '==', query)
      .get();
    const usernameResults = await usersRef
      .where('username', '==', query)
      .get();

    const results = [...nameResults.docs, ...usernameResults.docs].map(doc => {
      return { id: doc.id, ...doc.data() };
    });

    setSearchResults(results);
  };

  return (
    <div>
      <h1>Search</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Search by name or username"
          value={searchTerm}
          onChange={handleChange}
        />
        <button type="submit">Search</button>
      </form>
      {searchResults.length > 0 && (
        <div>
          <h2>Results</h2>
          <ul>
            {searchResults.map((result) => (
              <li key={result.id}>
                <h3>{result.name}</h3>
                <p>Username: {result.username}</p>
                {result.file && (
                  <p>
                    File:{' '}
                    <a href={result.file} target="_blank" rel="noopener noreferrer">
                      Download
                    </a>
                  </p>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default Search;
''''