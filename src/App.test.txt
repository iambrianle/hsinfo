src/App.js
''''
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';
import Register from './components/Register';

import Login from './components/Login';
import Profile from './components/Profile';
import Search from './components/Search';
import ChangePassword from './components/ChangePassword';

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Navigate to="/login" />} />
        <Route path="/register" element={<Register />} />
        <Route path="/login" element={<Login />} />
        <Route path="/profile" element={<Profile />} />
        <Route path="/search" element={<Search />} />
        <Route path="/change-password" element={<ChangePassword />} />
      </Routes>
    </Router>
  );
};

export default App;
'''

src/firebase.js
''''
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getStorage } from 'firebase/storage';
import { getFirestore } from "firebase/firestore";


const firebaseConfig = {
  apiKey: "AIzaSyAIhN2rKdzRum24bxN1oFfOrS0r7POzFrU",
  authDomain: "hsinfohs.firebaseapp.com",
  projectId: "hsinfohs",
  storageBucket: "hsinfohs.appspot.com",
  messagingSenderId: "94732520226",
  appId: "1:94732520226:web:6ffda594e09049de12337b"
};


const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
const storage = getStorage(app);

export { auth, db, storage };
''''
src/WithAdmin.js
''''
import React, { useEffect, useState } from "react";
import { onAuthStateChanged } from "firebase/auth";
import { getAuth } from "firebase/auth";

const withAdmin = (WrappedComponent) => {
  return (props) => {
    const [isAdmin, setIsAdmin] = useState(false);
    const [loading, setLoading] = useState(true);

    const adminUID = "pF0ZQtyt35ZZybtVwpKweyKcHQ63";
    const auth = getAuth();

    useEffect(() => {
      const unsubscribe = onAuthStateChanged(auth, (user) => {
        if (user && user.uid === adminUID) {
          setIsAdmin(true);
        } else {
          setIsAdmin(false);
        }
        setLoading(false);
      });

      return () => unsubscribe();
    }, [auth]);

    if (loading) {
      return <p>Loading...</p>;
    }

    if (isAdmin) {
      return <WrappedComponent {...props} />;
    }

    return <p>Access Denied. You must be an admin to view this page.</p>;
  };
};

export default withAdmin;
''''

src/components/ChangePassword.js
''''
import React, { useState } from 'react';
import { getAuth, EmailAuthProvider, signInWithEmailAndPassword, updatePassword } from "firebase/auth";

const ChangePassword = () => {
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [message, setMessage] = useState('');
  const auth = getAuth();

  const handleChangePassword = async (e) => {
    e.preventDefault();
    setMessage("");
  
    try {
      const user = auth.currentUser;
      await signInWithEmailAndPassword(auth, user.email, currentPassword);
      await updatePassword(user, newPassword);
      setMessage("Password changed successfully");
      setCurrentPassword("");
      setNewPassword("");
    } catch (error) {
      setMessage(error.message);
    }
  };

  return (
    <div>
      <h1>Change Password</h1>
      {message && <p>{message}</p>}
      <form onSubmit={handleChangePassword}>
        <input
          type="password"
          placeholder="Current Password"
          value={currentPassword}
          onChange={(e) => setCurrentPassword(e.target.value)}
        />
        <input
          type="password"
          placeholder="New Password"
          value={newPassword}
          onChange={(e) => setNewPassword(e.target.value)}
        />
        <button type="submit">Change Password</button>
      </form>
    </div>
  );
};

export default ChangePassword;
''''
src/components/Login.js
''''
import React, { useState } from 'react';
import { auth } from "../firebase";
import { signInWithEmailAndPassword } from "firebase/auth";

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      await signInWithEmailAndPassword(auth, email, password)
      setEmail('');
      setPassword('');
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div>
      <h1>Login</h1>
      {error && <p>{error}</p>}
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
};

export default Login;
''''
src/components/Profile
''''
import React, { useState, useEffect } from 'react';
import { onAuthStateChanged } from "firebase/auth";
import { collection } from "firebase/firestore";
import { ref } from "firebase/storage";
import { auth } from "../firebase";
import { doc, setDoc, updateDoc, getDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { uploadBytes, getDownloadURL } from 'firebase/storage';
import { storage } from '../firebase';




const Profile = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [info, setInfo] = useState({
    firstName: "",
    lastName: "",
    username: "",
    age: "",
    country: "",
    phoneNumber: "",
    email: "",
    bio: "",
    file: null,
  });


  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUser(user);
        fetchProfileInfo(user.uid);
      } else {
        setUser(null);
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  const fetchProfileInfo = async (uid) => {
    const userRef = doc(db, 'users', uid);
    const userData = await getDoc(userRef);

    if (userData.exists()) {
      setInfo(userData.data());
    } else {
      setInfo({
        firstName: "",
        lastName: "",
        username: "",
        age: "",
        country: "",
        phoneNumber: "",
        email: "",
        bio: "",
        file: null,
      });
    }
  };

  const handleChange = (e) => {
    setInfo({
      ...info,
      [e.target.name]: e.target.value,
    });
  };

  const handleFileChange = (e) => {
    setInfo({
      ...info,
      file: e.target.files[0],
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const userRef = doc(db, 'users', user.uid);
    const userData = {
      firstName: info.firstName,
      lastName: info.lastName,
      firstNameLowerCase: info.firstName.toLowerCase(),
      lastNameLowerCase: info.lastName.toLowerCase(),
      username: info.username,
      age: info.age,
      country: info.country,
      phoneNumber: info.phoneNumber,
      email: info.email,
      bio: info.bio,
    };
    await setDoc(userRef, userData);

    if (info.file) {
      const storageRef = ref(storage, 'files/' + user.uid);

      // Upload the file to Firebase Storage
      await uploadBytes(storageRef, info.file);

      // Get the download URL and update the Firestore document
      const fileUrl = await getDownloadURL(storageRef);
      await updateDoc(userRef, { file: fileUrl });
    }
  };

  if (loading) {
    return <p>Loading...</p>;
  }

  if (!user) {
    return <p>Please log in to view your profile.</p>;
  }

  return (
    <div>
      <h1>Profile</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          name="firstName"
          placeholder="First Name"
          value={info.firstName}
          onChange={handleChange}
        />
        <input
          type="text"
          name="lastName"
          placeholder="Last Name"
          value={info.lastName}
          onChange={handleChange}
        />
        <input
          type="text"
          name="username"
          placeholder="Username"
          value={info.username}
          onChange={handleChange}
        />
        <input
          type="number"
          name="age"
          placeholder="Age"
          value={info.age}
          onChange={handleChange}
        />
        <input
          type="text"
          name="country"
          placeholder="Country"
          value={info.country}
          onChange={handleChange}
        />
        <input
          type="text"
          name="phoneNumber"
          placeholder="Phone Number"
          value={info.phoneNumber}
          onChange={handleChange}
        />
        <input
          type="email"
          name="email"
          placeholder="Email"
          value={info.email}
          onChange={handleChange}
        />
        <textarea
          name="bio"
          placeholder="Bio"
          value={info.bio}
          onChange={handleChange}
        />
        <input type="file" onChange={handleFileChange} />
        <button type="submit">Save</button>
      </form>
    </div>
  );
};

export default Profile;
''''
src/components/Register.js
''''
import React, { useState } from 'react';
import { auth } from "../firebase";
import { createUserWithEmailAndPassword } from "firebase/auth";
import withAdmin from "../WithAdmin";


const Register = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  

  const handleRegister = async (e) => {
    e.preventDefault();
    try {
      await createUserWithEmailAndPassword(auth, email, password)
      setEmail('');
      setPassword('');
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div>
      <h1>Admin Add Account</h1>
      {error && <p>{error}</p>}
      <form onSubmit={handleRegister}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Register</button>
      </form>
    </div>
  );
};

export default withAdmin(Register);
''''
src/components/Search.js
''''
import React, { useState } from 'react';
import { collection } from "firebase/firestore";
import { query, where, getDocs } from 'firebase/firestore';
import { db } from '../firebase';


const Search = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);

  const handleChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const queryText = searchTerm.trim();
    const usersRef = collection(db, 'users');
  
    const firstNameQuery = query(usersRef, where('firstNameLowerCase', '==', queryText.toLowerCase()));
    const lastNameQuery = query(usersRef, where('lastNameLowerCase', '==', queryText.toLowerCase()));
    const usernameQuery = query(usersRef, where('username', '==', queryText.toLowerCase()));
  
    const firstNameResults = await getDocs(firstNameQuery);
    const lastNameResults = await getDocs(lastNameQuery);
    const usernameResults = await getDocs(usernameQuery);
  
    const results = [
      ...firstNameResults.docs,
      ...lastNameResults.docs,
      ...usernameResults.docs,
    ].map((doc) => {
      return { id: doc.id, ...doc.data() };
    });
  
    setSearchResults(results);
  };

  return (
    <div>
      <h1>Search</h1>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Search by name or username"
          value={searchTerm}
          onChange={handleChange}
        />
        <button type="submit">Search</button>
      </form>
      {searchResults.length > 0 && (
        <div>
          <h2>Results</h2>
          <ul>
            {searchResults.map((result) => (
              <li key={result.id}>
                <h3>{result.firstName} {result.lastName}</h3>
                <p>Username: {result.username}</p>
                <p>Age: {result.age}</p>
                <p>Country: {result.country}</p>
                <p>Phone Number: {result.phoneNumber}</p>
                <p>Email: {result.email}</p>
                <p>Bio: {result.bio}</p>
                {result.file && (
                  <p>
                    File:{' '}
                    <a
                      href={result.file}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      Download
                    </a>
                  </p>
                )}
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};

export default Search;
''''

